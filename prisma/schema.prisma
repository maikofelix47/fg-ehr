generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  password    String
  role        Role
  email       String        @unique
  sessions    UserSession[]
  appointments Appointment[]
}

enum Role {
  Admin
  Doctor
  Nurse
}

model UserSession {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  token      String
  createdAt  DateTime
  expiresAt  DateTime
}

model Patient {
  id            Int          @id @default(autoincrement())
  name          String
  contact       String
  address       String
  age           Int
  visits        Visit[]
  appointments  Appointment[]
}

model Doctor {
  id           Int             @id @default(autoincrement())
  name         String
  contact      String
  address      String
  age          Int
  speciality   String
  encounters   doctorEncounter[]
}

model doctorEncounter {
  id             Int           @id @default(autoincrement())
  visit          Visit         @relation(fields: [visitId], references: [id])
  visitId        Int
  doctor         Doctor        @relation(fields: [doctorId], references: [id])
  doctorId       Int
  encounterDate  DateTime
  encounterNote  String
}

model Visit {
  id              Int            @id @default(autoincrement())
  patient         Patient        @relation(fields: [patientId], references: [id])
  patientId       Int
  visitType       VisitType
  visitStatus     VisitStatus
  visitPurpose    VisitPurpose
  visitDate       DateTime
  visitReason     String
  visitNote       String
  triage          Triage?        @relation(fields: [triageId], references: [id])
  triageId        Int?
  diagnosis       DiagnosisForm? @relation(fields: [diagnosisId], references: [id])
  diagnosisId     Int?
  prescription    PrescriptionForm? @relation(fields: [prescriptionId], references: [id])
  prescriptionId  Int?
  labTests        LabTest[]
  doctorEncounter doctorEncounter[]
}

enum VisitType {
  OPD
  IPD
  Emergency
}

enum VisitStatus {
  Pending
  InProgress
  Completed
  Cancelled
}

enum VisitPurpose {
  Initial
  Return
}

model Triage {
  id           Int       @id @default(autoincrement())
  triageDate   DateTime
  triageNote   String
  visit        Visit     @relation(fields: [visitId], references: [id])
  visitId      Int       @unique
}

model DiagnosisForm {
  id           Int       @id @default(autoincrement())
  diagnosis    String
  note         String
  visit        Visit     @relation(fields: [visitId], references: [id])
  visitId      Int       @unique
}

model PrescriptionForm {
  id           Int       @id @default(autoincrement())
  medicine     String
  dosage       String
  frequency    String
  duration     String
  note         String
  visit        Visit     @relation(fields: [visitId], references: [id])
  visitId      Int       @unique
}

model LabTest {
  id           Int       @id @default(autoincrement())
  testName     String
  testResult   String
  testNote     String
}

model Appointment {
  id              Int            @id @default(autoincrement())
  patient         Patient        @relation(fields: [patientId], references: [id])
  patientId       Int
  doctor          Doctor         @relation(fields: [doctorId], references: [id])
  doctorId        Int
  scheduledAt     DateTime
  appointmentAt  DateTime
  status          AppointmentStatus
  note            String
}

enum AppointmentStatus {
  Pending
  InProgress
  Completed
  Cancelled
}
